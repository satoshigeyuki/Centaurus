parse   : chunk ;
chunk   : stat* ret_stat? ;
stat    : assignment | var | do_block | while_stat | repeat_stat | local | goto_stat | if_stat | for_stat | function | label | 'break' | ';' ;
do_block : 'do' chunk 'end' ;
while_stat : 'while' expr do_block ;
repeat_stat : 'repeat' chunk 'until' expr ;
assignment : var_list '=' expr_list ;
local : 'local' ( name_list '=' expr_list | 'function' Name func_body ) ;
goto_stat : 'goto' Name ;
if_stat : 'if' expr 'then' chunk elseif_stat* else_stat? 'end' ;
elseif_stat : 'elseif' expr 'then' chunk ;
else_stat : 'else' chunk ;
for_stat : 'for' ( Name '=' expr ',' expr (',' expr)? do_block | name_list 'in' expr_list do_block );
function : 'function' names ( ':' Name func_body | func_body );
names : Name ( '.' Name )* ;
function_literal : 'function' func_body ;
func_body : '(' param_list ')' chunk 'end' ;
param_list : name_list (',' '...')? | '...'? ;
ret_stat : 'return' expr_list? ';'? ;
expr : or_expr ;
or_expr : and_expr ('or' and_expr)* ;
and_expr : rel_expr ('and' rel_expr)* ;
rel_expr : bit_or_expr (('<' | '>' | '<=' | '>=' | '~=' | '==') bit_or_expr)? ;
bit_or_expr : bit_excl_or_expr ('|' bit_excl_or_expr)* ;
bit_excl_or_expr : bit_and_expr ('~' bit_and_expr)* ;
bit_and_expr : bit_shift_expr ('&' bit_shift_expr)* ;
bit_shift_expr : concat_expr (('<<' | '>>') concat_expr)* ;
concat_expr : add_expr ('..' add_expr)* ;
add_expr : mult_expr (('+' | '-') mult_expr)* ;
mult_expr : unary_expr (('*' | '/' | '%' | '//') unary_expr)* ;
unary_expr : '-' unary_expr | '#' pow_expr | '!' unary_expr | '~' pow_expr | pow_expr ;
pow_expr : atom ('^' atom)* ;
atom : var | function_literal | table_constructor | '...' | Number | String | 'nil' | 'true' | 'false' ;
var : callee tail* ;
callee : '(' expr ')' | Name ;
tail : '.' Name | '[' expr ']' | ':' Name '(' expr_list? ')' | ':' Name table_constructor | ':' Name String | '(' expr_list? ')' | table_constructor | String ;
table_constructor : '{' field_list? '}' ;
field_list : field (field_sep field)* field_sep? ;
field : '[' expr ']' '=' expr | Name '=' expr | expr ;
field_sep : ',' | ';' ;
label : '::' Name '::' ;
var_list : var (',' var)* ;
expr_list : expr (',' expr)* ;
name_list : Name (',' Name)* ;
Name : /[A-Z_][a-zA-Z_0-9]*/ ;
Number : /(([0-9]+(\.[0-9]*)?([eE][\-+]?[0-9]+)?)|(\.[0-9]+([eE][\-+]?[0-9]+)?))|(0[xX][0-9a-fA-F](\.[0-9a-fA-F]*)?([pP][\-+]?[0-9]+)?)/ ;
String : /"((\\([abfnrtv\\"'z]|([0-9]([0-9][0-9]?)?)|(x[0-9A-Fa-f][0-9A-Fa-f])))|[^\\"\r\n])*"/ | /'((\\([abfnrtv\\"'z]|([0-9]([0-9][0-9]?)?)|(x[0-9A-Fa-f][0-9A-Fa-f])))|[^\\'\r\n])*'/ | /\[=*\[([^\\]|(\\([abfnrtv\\"'z]|([0-9]([0-9][0-9]?)?)|(x[0-9A-Fa-f][0-9A-Fa-f]))))*\]=*\]/ ;
